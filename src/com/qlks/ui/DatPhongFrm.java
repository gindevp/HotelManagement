/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.qlks.ui;

import java.text.Normalizer;
import java.util.regex.Pattern;
import com.qlks.dao.DichVuDAO;
import com.qlks.dao.HDDichVuDAO;
import com.qlks.dao.HDPhongDAO;
import com.qlks.dao.LoaiGiaDAO;
import com.qlks.dao.LoaiPhongDAO;
import com.qlks.dao.LoaiPhongLoaiGiaDAO;
import com.qlks.dao.PhongDAO;
import com.qlks.dao.PhongTienNghiDAO;
import com.qlks.entity.DichVu;
import com.qlks.entity.HDDichVu;
import com.qlks.entity.HDPhong;
import com.qlks.entity.LoaiGia;
import com.qlks.entity.LoaiPhong;
import com.qlks.entity.LoaiPhongLoaiGia;
import com.qlks.entity.Phong;
import com.qlks.util.Auth;
import com.qlks.util.FormatData;
import com.qlks.util.MsgBox;
import com.qlks.util.Validator;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import com.qlks.dao.PDFExportDAO;
import com.qlks.dao.HoaDonDAO;
import com.qlks.dao.KhachHangDAO;
import com.qlks.entity.HoaDon;
import com.qlks.entity.KhachHang;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.kernel.color.DeviceRgb;
import com.itextpdf.layout.border.Border;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.property.TextAlignment;
import com.itextpdf.layout.property.VerticalAlignment;
import com.qlks.dao.NhanVienDAO;
import com.qlks.entity.NhanVien;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hungn
 */
public class DatPhongFrm extends javax.swing.JInternalFrame {

    private PDFExportDAO pdfdao = new PDFExportDAO();
    private LoaiPhongDAO lpdao = new LoaiPhongDAO();
    private PhongDAO pdao = new PhongDAO();
    private KhachHangDAO khdao = new KhachHangDAO();
    private DichVuDAO dvdao = new DichVuDAO();
    private LoaiPhongLoaiGiaDAO lplgdao = new LoaiPhongLoaiGiaDAO();
    private LoaiGiaDAO lgdao = new LoaiGiaDAO();
    private HoaDonDAO hddao = new HoaDonDAO();
    private HDPhongDAO hdpdao = new HDPhongDAO();
    private HDDichVuDAO hddvdao = new HDDichVuDAO();
    private PhongTienNghiDAO ptndao = new PhongTienNghiDAO();
    private NhanVienDAO nvdao = new NhanVienDAO();

    private List<Phong> roomList = new ArrayList<>();
    private List<HDDichVu> serviceList = new ArrayList<>();

    private int iChonPhong = -1;
    private int iChonPhong1 = -1;
    private int iDaChon = -1;
    private int iDichVu = -1;
    private int iDangThue = -1;
    private boolean isSelectDate = true;

    /**
     * Creates new form BoPhanFrm
     */
    public DatPhongFrm() {
        initComponents();
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrGioiTinh = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        tabs = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoomList = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cboRoomType = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtAdult = new javax.swing.JTextField();
        btnFindRoom = new javax.swing.JButton();
        btnSelectRoom = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRoomSelected = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        btnRemoveRoom = new javax.swing.JButton();
        txtChild = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtIdCus = new javax.swing.JTextField();
        txtIdCardCus = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPhoneCus = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAddressCus = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtNationCus = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        rdoFemale = new javax.swing.JRadioButton();
        rdoMale = new javax.swing.JRadioButton();
        btnAddCus = new javax.swing.JButton();
        btnFindCus = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtNameCus = new javax.swing.JTextField();
        btnCreateRental = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboService = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        btnAddService = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblService = new javax.swing.JTable();
        btnRemoveService = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lblServicePrice = new javax.swing.JLabel();
        lblTotalService = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cboPriceType = new javax.swing.JComboBox<>();
        btnUpdateRental = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblRentalList = new javax.swing.JTable();
        btnPay = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        txtKeyword = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setTitle("Đặt phòng - Trả phòng");
        setOpaque(true);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, java.awt.Color.black), "Tìm Phòng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N

        tblRoomList.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tblRoomList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Số Phòng", "Đơn Giá", "Mô Tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRoomList.setFillsViewportHeight(true);
        tblRoomList.setRowHeight(40);
        tblRoomList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRoomList);
        if (tblRoomList.getColumnModel().getColumnCount() > 0) {
            tblRoomList.getColumnModel().getColumn(0).setMinWidth(80);
            tblRoomList.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblRoomList.getColumnModel().getColumn(0).setMaxWidth(80);
            tblRoomList.getColumnModel().getColumn(1).setMinWidth(100);
            tblRoomList.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblRoomList.getColumnModel().getColumn(1).setMaxWidth(100);
            tblRoomList.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("Loại Phòng:");

        cboRoomType.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cboRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboRoomType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRoomTypeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Người lớn:");

        txtAdult.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        btnFindRoom.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnFindRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/search_24px.png"))); // NOI18N
        btnFindRoom.setText("Tìm Phòng");
        btnFindRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindRoomActionPerformed(evt);
            }
        });

        btnSelectRoom.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnSelectRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/add_24px.png"))); // NOI18N
        btnSelectRoom.setText("Chọn Phòng");
        btnSelectRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectRoomActionPerformed(evt);
            }
        });

        tblRoomSelected.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tblRoomSelected.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Số Phòng", "Đơn Giá", "Mô Tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRoomSelected.setFillsViewportHeight(true);
        tblRoomSelected.setRowHeight(40);
        tblRoomSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomSelectedMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRoomSelected);
        if (tblRoomSelected.getColumnModel().getColumnCount() > 0) {
            tblRoomSelected.getColumnModel().getColumn(0).setMinWidth(80);
            tblRoomSelected.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblRoomSelected.getColumnModel().getColumn(0).setMaxWidth(80);
            tblRoomSelected.getColumnModel().getColumn(1).setMinWidth(160);
            tblRoomSelected.getColumnModel().getColumn(1).setPreferredWidth(160);
            tblRoomSelected.getColumnModel().getColumn(1).setMaxWidth(160);
        }

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("Danh sách phòng đã chọn:");

        btnRemoveRoom.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnRemoveRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/delete_24px.png"))); // NOI18N
        btnRemoveRoom.setText("Xóa phòng đã chọn");
        btnRemoveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRoomActionPerformed(evt);
            }
        });

        txtChild.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel18.setText("Trẻ em:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFindRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(cboRoomType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                    .addComponent(txtAdult))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtChild))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnSelectRoom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnRemoveRoom)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAdult, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtChild, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSelectRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnRemoveRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, java.awt.Color.black), "Thông Tin Khách Hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setText("Mã KH:");

        txtIdCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtIdCus.setEnabled(false);

        txtIdCardCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel6.setText("CMND:");

        txtPhoneCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel7.setText("SDT:");

        txtAddressCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel8.setText("Địa Chỉ:");

        txtNationCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel9.setText("Quốc Tịch:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel10.setText("Giới Tính:");

        rdoFemale.setBackground(new java.awt.Color(255, 255, 255));
        bgrGioiTinh.add(rdoFemale);
        rdoFemale.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        rdoFemale.setText("Nam");

        rdoMale.setBackground(new java.awt.Color(255, 255, 255));
        bgrGioiTinh.add(rdoMale);
        rdoMale.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        rdoMale.setText("Nữ");

        btnAddCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnAddCus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/add_24px.png"))); // NOI18N
        btnAddCus.setText("Thêm mới");
        btnAddCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCusActionPerformed(evt);
            }
        });

        btnFindCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnFindCus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/username_24px.png"))); // NOI18N
        btnFindCus.setText("Đã có thông tin");
        btnFindCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindCusActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel11.setText("Tên KH");

        txtNameCus.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddCus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNameCus))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdCardCus))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPhoneCus))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddressCus))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNationCus))
                    .addComponent(btnFindCus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdoMale, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 99, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdCus)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtIdCus, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNameCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtIdCardCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPhoneCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtAddressCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNationCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdoFemale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdoMale, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(btnAddCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFindCus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnCreateRental.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnCreateRental.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/bookroom_24px.png"))); // NOI18N
        btnCreateRental.setText("LẬP PHIẾU THUÊ");
        btnCreateRental.setIconTextGap(8);
        btnCreateRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRentalActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.black, java.awt.Color.black), "Dịch Vụ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Dịch Vụ:");

        cboService.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cboService.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboServiceActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel12.setText("Số Lượng:");

        txtQuantity.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));

        btnAddService.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnAddService.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/add_24px.png"))); // NOI18N
        btnAddService.setText("Thêm mới");
        btnAddService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServiceActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel13.setText("Danh sách các Dịch vụ đã chọn:");

        tblService.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tblService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dịch Vụ", "Đơn Giá", "Số Lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblService.setFillsViewportHeight(true);
        tblService.setRowHeight(40);
        tblService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblServiceMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblService);
        if (tblService.getColumnModel().getColumnCount() > 0) {
            tblService.getColumnModel().getColumn(0).setResizable(false);
            tblService.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblService.getColumnModel().getColumn(1).setResizable(false);
            tblService.getColumnModel().getColumn(2).setResizable(false);
        }

        btnRemoveService.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnRemoveService.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/delete_24px.png"))); // NOI18N
        btnRemoveService.setText("Xóa");
        btnRemoveService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveServiceActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 102, 255));
        jLabel16.setText("Giá:");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 102, 255));
        jLabel17.setText("Tổng:");

        lblServicePrice.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblServicePrice.setForeground(new java.awt.Color(0, 102, 255));

        lblTotalService.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblTotalService.setForeground(new java.awt.Color(0, 102, 255));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQuantity)
                            .addComponent(cboService, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnRemoveService, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalService, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnAddService, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblServicePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboService, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddService, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblServicePrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemoveService, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTotalService, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel14.setText("Hình thức thuê:");

        cboPriceType.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cboPriceType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboPriceType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPriceTypeActionPerformed(evt);
            }
        });

        btnUpdateRental.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnUpdateRental.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/edit_24px.png"))); // NOI18N
        btnUpdateRental.setText("CẬP NHẬT PHIẾU THUÊ");
        btnUpdateRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRentalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboPriceType, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 297, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdateRental, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreateRental, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboPriceType, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateRental, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateRental, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        tabs.addTab("Đặt Phòng", jPanel6);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Danh Sách Các Phiếu Thuê ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N

        tblRentalList.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tblRentalList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TG Lập Phiếu", "Tên Khách Hàng", "CMND KH", "SDT KH", "Loại Hình Thuê", "Tổng Tiền", "NV Lập Phiếu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRentalList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tblRentalList.setFillsViewportHeight(true);
        tblRentalList.setRowHeight(40);
        tblRentalList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRentalListMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tblRentalList);
        if (tblRentalList.getColumnModel().getColumnCount() > 0) {
            tblRentalList.getColumnModel().getColumn(0).setMinWidth(60);
            tblRentalList.getColumnModel().getColumn(0).setPreferredWidth(60);
            tblRentalList.getColumnModel().getColumn(0).setMaxWidth(60);
            tblRentalList.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblRentalList.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblRentalList.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblRentalList.getColumnModel().getColumn(4).setPreferredWidth(80);
        }

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 1395, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnPay.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btnPay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/qlks/icon/paper_money_24px.png"))); // NOI18N
        btnPay.setText("THANH TOÁN");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel15.setText("Nhập tên, SDT hoặc CMND của Khách hàng để tìm kiếm:");

        txtKeyword.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtKeyword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKeywordKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKeyword)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabs.addTab("Trả Phòng", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindRoomActionPerformed
        this.findRoom();
    }//GEN-LAST:event_btnFindRoomActionPerformed

    private void tblRoomListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomListMouseClicked
        this.iChonPhong1 = tblRoomList.getSelectedRow();
//        this.fillGiaPhong();
        if (evt.getClickCount() == 1) {
            this.iChonPhong = tblRoomList.getSelectedRow();
            this.updateStatus();
        }
    }//GEN-LAST:event_tblRoomListMouseClicked

    private void btnSelectRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectRoomActionPerformed
        this.selectRoom();
    }//GEN-LAST:event_btnSelectRoomActionPerformed

    private void btnRemoveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRoomActionPerformed
        this.iDaChon = tblRoomSelected.getSelectedRow();
        this.removeRoom();
    }//GEN-LAST:event_btnRemoveRoomActionPerformed

    private void btnAddCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCusActionPerformed
        this.addCustomver();
    }//GEN-LAST:event_btnAddCusActionPerformed

    private void btnFindCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCusActionPerformed
        this.findCustomer();
    }//GEN-LAST:event_btnFindCusActionPerformed

    private void btnAddServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddServiceActionPerformed
        this.addService();
    }//GEN-LAST:event_btnAddServiceActionPerformed

    private void btnRemoveServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveServiceActionPerformed
        this.removeService();
    }//GEN-LAST:event_btnRemoveServiceActionPerformed

    private void tblRoomSelectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomSelectedMouseClicked
        this.iDaChon = tblRoomSelected.getSelectedRow();
        this.updateStatus();
    }//GEN-LAST:event_tblRoomSelectedMouseClicked

    private void tblServiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblServiceMouseClicked
        if (evt.getClickCount() == 1) {
            this.iDichVu = tblService.getSelectedRow();
            this.updateStatus();
        }
    }//GEN-LAST:event_tblServiceMouseClicked

    private void btnCreateRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRentalActionPerformed
        this.createRental();
    }//GEN-LAST:event_btnCreateRentalActionPerformed

    private void cboPriceTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPriceTypeActionPerformed
        if (cboPriceType.getSelectedItem() != null && cboRoomType.getSelectedItem() != null && !txtAdult.getText().isEmpty()) {
            this.fillTblRoomList();
            this.fillTblRoomSelected();
        }
    }//GEN-LAST:event_cboPriceTypeActionPerformed

    private void tblRentalListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRentalListMouseClicked
        this.iDangThue = tblRentalList.getSelectedRow();
        if (evt.getClickCount() == 2) {
            this.editRental();
            tabs.setSelectedIndex(0);
        } else if (evt.getClickCount() == 1) {
            this.updateStatus();
        }
    }//GEN-LAST:event_tblRentalListMouseClicked

    private void txtKeywordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeywordKeyReleased
        this.fillTblRentalList();
    }//GEN-LAST:event_txtKeywordKeyReleased

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        this.pay();
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnUpdateRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRentalActionPerformed
        this.updateRetal();
    }//GEN-LAST:event_btnUpdateRentalActionPerformed

    private void cboServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboServiceActionPerformed
        if (cboService.getSelectedItem() != null) {
            this.fillServicePrice();
        }
    }//GEN-LAST:event_cboServiceActionPerformed

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased
        this.fillServicePrice();
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void cboRoomTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRoomTypeActionPerformed
        if (cboPriceType.getSelectedItem() != null && cboRoomType.getSelectedItem() != null && !txtAdult.getText().isEmpty()) {
            this.fillTblRoomList();
        }
    }//GEN-LAST:event_cboRoomTypeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrGioiTinh;
    private javax.swing.JButton btnAddCus;
    private javax.swing.JButton btnAddService;
    private javax.swing.JButton btnCreateRental;
    private javax.swing.JButton btnFindCus;
    private javax.swing.JButton btnFindRoom;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnRemoveRoom;
    private javax.swing.JButton btnRemoveService;
    private javax.swing.JButton btnSelectRoom;
    private javax.swing.JButton btnUpdateRental;
    private javax.swing.JComboBox<String> cboPriceType;
    private javax.swing.JComboBox<String> cboRoomType;
    private javax.swing.JComboBox<String> cboService;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblServicePrice;
    private javax.swing.JLabel lblTotalService;
    private javax.swing.JRadioButton rdoFemale;
    private javax.swing.JRadioButton rdoMale;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblRentalList;
    private javax.swing.JTable tblRoomList;
    private javax.swing.JTable tblRoomSelected;
    private javax.swing.JTable tblService;
    private javax.swing.JTextField txtAddressCus;
    private javax.swing.JTextField txtAdult;
    private javax.swing.JTextField txtChild;
    private javax.swing.JTextField txtIdCardCus;
    private javax.swing.JTextField txtIdCus;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtNameCus;
    private javax.swing.JTextField txtNationCus;
    private javax.swing.JTextField txtPhoneCus;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private void init() {
        this.fillCboRoomType();
        this.fillCboPriceType();
        this.fillCboService();
        this.fillTblRentalList();
        this.updateStatus();
    }

    private void fillCboPriceType() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboPriceType.getModel();
        model.removeAllElements();
        List<LoaiGia> list = lgdao.selectAll();
        for (LoaiGia item : list) {
            model.addElement(item);
        }
    }

    private void fillCboRoomType() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboRoomType.getModel();
        model.removeAllElements();
        List<LoaiPhong> list = lpdao.selectAll();

        for (LoaiPhong lp : list) {
            model.addElement(lp);
        }

    }

    private void fillCboService() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboService.getModel();
        model.removeAllElements();
        List<DichVu> list = dvdao.selectEnable();
        for (DichVu dv : list) {
            model.addElement(dv);
        }

    }

    private void findRoom() {
        if (txtChild.getText().trim().isEmpty()) {
            if (Validator.isBlack(this, new String[]{"Số người lớn"}, txtAdult)
                    && Validator.isPosNum(this, new String[]{"Số người lớn"}, txtAdult)) {
                this.fillTblRoomList();
            }
        } else {
            if (Validator.isPosNum(this, new String[]{"Số người lớn", "Số trẻ em"}, txtAdult, txtChild)) {
//                this.fillTblRentalList();
                this.fillTblRoomList();
            }
        }
    }

    private void fillTblRoomList() {
        DefaultTableModel model = (DefaultTableModel) tblRoomList.getModel();
        model.setRowCount(0);
        LoaiPhong loaiPhong = (LoaiPhong) cboRoomType.getSelectedItem();
        Integer sucChua = 0;
        try {
            Integer nguoiLon = Integer.parseInt(txtAdult.getText().trim());
            Integer treEm = Integer.parseInt(txtChild.getText().trim());
            sucChua = nguoiLon + treEm / 2;
        } catch (Exception e) {
            sucChua = 0;
        }
        List<Phong> list = pdao.selectByLpAndSucChua(loaiPhong.getMa(), sucChua);
        LoaiGia lg = (LoaiGia) cboPriceType.getSelectedItem();
        LoaiPhongLoaiGia lplg = (LoaiPhongLoaiGia) lplgdao.selectByLpAndLg(loaiPhong.getMa(), lg.getMa());

        for (Phong p : list) {
            String des = "";
            List<Object> moTa = ptndao.moTaPhong(p.getSoPhong());
            if (moTa.size() == 1) {
                des = moTa.get(0).toString();
            } else if (moTa.size() == 2) {
                des = moTa.get(0).toString() + ", " + moTa.get(1);
            }

            model.addRow(new Object[]{
                p.getSoPhong(),
                FormatData.formatMoney(lplg.getDonGia()),
                des
            });
        }
    }

    private void selectRoom() {
        String soPhong = tblRoomList.getValueAt(iChonPhong, 0).toString();
        Phong p = pdao.selectByID(soPhong);
        if (checkRoom(p, roomList)) {
            pdao.updateAfterChooseOrRemove(p, true);
            roomList.add(p);
            MsgBox.alert(this, "Đã thêm phòng!");
        } else {
            MsgBox.alert(this, "Phòng đã được chọn! Vui lòng chọn phòng khác");
        }
        this.updateStatus();
        this.fillTblRoomList();
        this.fillTblRoomSelected();
    }

    private boolean checkRoom(Phong p, List<Phong> list) {
        for (Phong item : list) {
            if (p.getSoPhong().equalsIgnoreCase(item.getSoPhong())) {
                return false;
            }
        }
        return true;
    }

    private void fillTblRoomSelected() {
        DefaultTableModel model = (DefaultTableModel) tblRoomSelected.getModel();
        model.setRowCount(0);
        LoaiGia lg = (LoaiGia) cboPriceType.getSelectedItem();
        System.out.println("selected: " + lg);
        String des = "";
        for (Phong p : roomList) {
            LoaiPhong loaiPhong = lpdao.selectByID(p.getMaLP());
            LoaiPhongLoaiGia lplg = (LoaiPhongLoaiGia) lplgdao.selectByLpAndLg(loaiPhong.getMa(), lg.getMa());
            System.out.println("selected" + lplg.getDonGia());
            List<Object> moTa = ptndao.moTaPhong(p.getSoPhong());
            if (moTa.size() == 1) {
                des = moTa.get(0).toString();
            } else if (moTa.size() == 2) {
                des = moTa.get(0).toString() + ", " + moTa.get(1);
            }
            model.addRow(new Object[]{
                p.getSoPhong(),
                FormatData.formatMoney(lplg.getDonGia()),
                des
            });
        }
    }

    private void removeRoom() {
        for (int i : tblRoomSelected.getSelectedRows()) {
            String soPhong = tblRoomSelected.getValueAt(i, 0).toString();
            Phong p = pdao.selectByID(soPhong);
            pdao.updateAfterChooseOrRemove(p, false);
            roomList.remove(i);
        }
        MsgBox.alert(this, "Đã xóa phòng!");
        this.updateStatus();
        this.fillTblRoomSelected();
        this.fillTblRoomList();
    }

    private void addCustomver() {
        KhachHang kh = this.getFormCustomer();
        if (kh != null) {
            if (khdao.insert(kh)) {
                MsgBox.alert(this, "Thêm Khách Hàng thành công");
                String cmnd = txtIdCardCus.getText().trim();
                KhachHang kh1 = khdao.selectBySdtOrCmnd(cmnd);
                this.setFormKhachHang(kh1);
            } else {
                MsgBox.alert(this, "Thêm Khách Hàng không thành công!");
            }
        }
        this.updateStatus();
    }

    private KhachHang getFormCustomer() {
        KhachHang kh = null;
        String[] title = new String[]{"Tên khách hàng", "CMND", "SDT", "Địa Chỉ", "Quốc tịch"};
        if (Validator.isBlack(this, title, txtNameCus, txtIdCardCus, txtPhoneCus, txtAddressCus, txtNationCus)
                && Validator.isIdentityCard(this, txtIdCardCus)
                && Validator.isExists(this, txtIdCardCus, khdao.selectCmnd(), "CMND")
                && Validator.isPhoneNum(this, txtPhoneCus)
                && Validator.isExists(this, txtPhoneCus, khdao.selectSdt(), "SDT")
                && Validator.isSelectedButtonGroup(this, bgrGioiTinh, "Giới tính")) {
            String ten = txtNameCus.getText().trim();
            String cmnd = txtIdCardCus.getText().trim();
            String sdt = txtPhoneCus.getText().trim();
            boolean gioiTinh = rdoFemale.isSelected() ? true : false;
            String diaChi = txtAddressCus.getText().trim();
            String quocTich = txtNationCus.getText().trim();

            kh = new KhachHang(ten, cmnd, sdt, gioiTinh, diaChi, quocTich);
        }
        return kh;
    }

    private void setFormKhachHang(KhachHang kh) {
        txtIdCus.setText(kh.getMa() + "");
        txtNameCus.setText(kh.getTen());
        txtIdCardCus.setText(kh.getCmnd());
        txtAddressCus.setText(kh.getDiaChi());
        txtNationCus.setText(kh.getQuocTich());
        txtPhoneCus.setText(kh.getSdt());
        rdoFemale.setSelected(kh.isGioiTinh());
        rdoMale.setSelected(!kh.isGioiTinh());
    }

    private void findCustomer() {
        String keyword = MsgBox.prompt(this, "Xin nhập SDT hoặc CMND của khách hàng...");
        if (!keyword.isEmpty()) {
            KhachHang kh = khdao.selectBySdtOrCmnd(keyword.trim());
            if (kh != null) {
                MsgBox.alert(this, "Tìm thấy Khách Hàng!");
                this.setFormKhachHang(kh);
            } else {
                MsgBox.alert(this, "Không tìm thấy Khách Hàng!");
            }
        }
        this.updateStatus();
    }

    private void updateStatus() {
        boolean chonPhong = iChonPhong >= 0;
        boolean lapPhieu = tblRoomSelected.getModel().getRowCount() > 0
                && !txtIdCus.getText().isEmpty()
                && Integer.parseInt(txtIdCus.getText().toString()) != 0
                && iDangThue < 0;
        boolean themKhachHang = txtIdCus.getText().isEmpty() ? true : false;
        boolean xoaPhong = this.iDaChon >= 0;
        boolean isDeleteService = this.iDichVu >= 0;
        boolean thanhToan = this.iDangThue >= 0;
        boolean capNhatPhieu = tblRoomSelected.getModel().getRowCount() > 0
                && !txtIdCus.getText().isEmpty()
                && Integer.parseInt(txtIdCus.getText().toString()) != 0
                && iDangThue >= 0;

        btnSelectRoom.setEnabled(chonPhong);
//        btnThemKh.setEnabled(isAddCus);
        btnCreateRental.setEnabled(lapPhieu);
        btnRemoveRoom.setEnabled(xoaPhong);
        btnRemoveService.setEnabled(isDeleteService);
        btnPay.setEnabled(thanhToan);
        btnUpdateRental.setEnabled(capNhatPhieu);
    }

    private void addService() {
        if (Validator.isPosNum(this, new String[]{"Số lượng"}, txtQuantity)) {
            DichVu dichVu = (DichVu) cboService.getSelectedItem();
            int maDv = dichVu.getMa();
            int soLuong = Integer.parseInt(txtQuantity.getText());
            HDDichVu hddv = new HDDichVu(maDv, soLuong);
            if (isExistsService(hddv, serviceList)) {
                serviceList.add(hddv);
                MsgBox.alert(this, "Đã thêm dịch vụ!");
            } else {
                if (MsgBox.confirm(this, "Dịch vụ đã có! Bạn có muốn cập nhật số lượng?")) {
                    for (int i = 0; i < serviceList.size(); i++) {
                        if (serviceList.get(i).getMaDv() == hddv.getMaDv()) {
                            serviceList.set(i, hddv);
                        }
                    }
                }
            }
        }
        this.fillTblService();
    }

    private void fillTblService() {
        DefaultTableModel model = (DefaultTableModel) tblService.getModel();
        model.setRowCount(0);

        try {
            double tong = 0;
            for (HDDichVu i : serviceList) {
                DichVu dv = dvdao.selectByID(i.getMaDv());
                model.addRow(new Object[]{
                    dv.getTen(),
                    FormatData.formatMoney(dv.getGia()),
                    i.getSoLuong()
                });
                tong += dv.getGia() * i.getSoLuong();
            };
            lblTotalService.setText(FormatData.formatMoney(tong));
        } catch (Exception e) {
            lblTotalService.setText("$$");
        }
    }

    private boolean isExistsService(HDDichVu item, List<HDDichVu> data) {
        for (HDDichVu i : data) {
            if (i.getMaDv() == (item.getMaDv())) {
//                MsgBox.alert(this, title + " đã tồn tại");
                return false;
            }
        }
        return true;
    }

    private void removeService() {
        for (int i : tblService.getSelectedRows()) {
            serviceList.remove(i);
        }
        MsgBox.alert(this, "Đã xóa dịch vụ!");
        this.fillTblService();
    }

    private void clearForm() {
        this.iChonPhong = -1;
        this.iDichVu = -1;
        this.iDaChon = -1;
        this.iDangThue = -1;
        roomList.clear();
        serviceList.clear();

        this.setFormKhachHang(new KhachHang());
        this.fillTblRoomList();
        this.fillTblRoomSelected();
        this.fillTblService();
        this.updateStatus();
    }

    private void createRental() {
//        if (this.checkSelectDate()) {
        if (MsgBox.confirm(this, "Xác nhận đặt phòng?")) {
            HoaDon hd = null;
            LoaiGia lg = (LoaiGia) cboPriceType.getSelectedItem();
            Integer maLg = lg.getMa();
            Integer maKH = Integer.parseInt(txtIdCus.getText().trim().toString());
            String maNv = Auth.user.getMa();
            //neu chon thue theo ngay va biet truoc ngay tra phong
//                if (maLg == 3 && jdcNgayTra.getDate() != null) {
//                    Timestamp ngayTt = new Timestamp(jdcNgayTra.getDate().getTime());
//                    hd = new HoaDon(ngayTt, maLg, maKH, maNv);
//                    if (hddao.insert(hd)) {
//                        System.out.println("create Hd success");
//                        MsgBox.alert(this, "Lập phiếu thuê thành công!");
//                        this.createHDPhong(maLg, maKH, maNv);
//                        this.createHDDichVu(maLg, maKH, maNv);
//                        this.clearForm();
//                        this.fillTblDangThue();
//                    } else {
//                        System.out.println("Lập phiếu thuê không thành công!");
//                    }
//                } else {
            hd = new HoaDon(maLg, maKH, maNv);
            if (hddao.insertWithoutNgayTt(hd)) {
                System.out.println("create Hd1 success");
                MsgBox.alert(this, "Lập phiếu thuê thành công!");
                this.createRoomInvoice(maLg, maKH, maNv);
                this.createServiceInvoice(maLg, maKH, maNv);
                this.clearForm();
                this.fillTblRentalList();
            } else {
                System.out.println("Lập phiếu thuê không thành công!");
            }
//                }
            this.clearForm();
        }
//        }
    }

//    private void checkJdcNgayTra() {
//        LoaiGia lg = (LoaiGia) cboLoaiGia.getSelectedItem();
//        if (lg != null) {
//            if (lg.getMa() == 3) {
//                jdcNgayTra.setEnabled(true);
//                chk.setEnabled(true);
//            } else {
//                jdcNgayTra.setEnabled(false);
//                chk.setEnabled(false);
//            }
//        }
//    }
//    private boolean checkSelectDate() {
//        if (chk.isEnabled()) {
//            if (!chk.isSelected()) {
//                if (Validator.checkSelectedDate(DatPhongFrm.this, new String[]{"ngày trả!"}, jdcNgayTra)
//                        && Validator.checkAfterNow(DatPhongFrm.this, jdcNgayTra, new Date(), 1)) {
//                    return true;
//                } else {
//                    return false;
//                }
//            } else {
//                return true;
//            }
//        } else {
//            return true;
//        }
//    }
    private void createRoomInvoice(Integer maLg, Integer maKH, String maNv) {
        HoaDon hd = hddao.selectByLgKhNv(maLg, maKH, maNv);
        Integer maHd = hd.getMa();
        for (Phong p : roomList) {
            pdao.updateAfterChooseOrRemove(p, true);
            HDPhong hdp = new HDPhong(maHd, p.getSoPhong());
            if (hdpdao.insert(hdp)) {
                System.out.println("hdp suc");
            } else {
                System.out.println("hdp fail");
            }
        }
    }

    private void createServiceInvoice(Integer maLg, Integer maKH, String maNv) {
        HoaDon hd = hddao.selectByLgKhNv(maLg, maKH, maNv);
        Integer maHd = hd.getMa();
        for (HDDichVu hddv : serviceList) {
            hddv.setMaHd(maHd);
            if (hddvdao.insert(hddv)) {
                System.out.println("hddv suc");
            } else {
                System.out.println("hddv fail");
            }
        }
    }

    private void fillTblRentalList() {
        DefaultTableModel model = (DefaultTableModel) tblRentalList.getModel();
        model.setRowCount(0);
        List<HoaDon> list = hddao.selectDsThue(txtKeyword.getText().trim());
        for (HoaDon hd : list) {
            Integer maKh = hd.getMaKh();
            KhachHang kh = khdao.selectByID(maKh);
            LoaiGia lg = lgdao.selectByID(hd.getMaLg());
            double tongTien = Double.parseDouble(hddao.selectTongTienNow(hd.getMa(), hd.getMaLg()).toString());
            NhanVien nv = nvdao.selectByID(hd.getMaNv());
            model.addRow(new Object[]{
                hd.getMa(),
                hd.getNgayThue(),
                kh.getTen(),
                kh.getCmnd(),
                kh.getSdt(),
                lg.getTen(),
                FormatData.formatMoney(tongTien),
                nv.getTen()
            });
        }
    }

    private void pay() {
        if (MsgBox.confirm(this, "Xác nhận thanh toán?")) {
            Integer maHd = Integer.parseInt(tblRentalList.getValueAt(this.iDangThue, 0).toString());
            HoaDon hd = hddao.selectByID(maHd);
            if (hddao.thanhToanHd(hd.getMa(), hd.getMaLg())) {
                try {
                    MsgBox.alert(this, "Thanh toán thành công!");
                    this.clearForm();
                    this.fillTblRentalList();
                    this.updateStatus();
                    this.exportBillToPDF(maHd);
                } catch (IOException ex) {
                    Logger.getLogger(DatPhongFrm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                MsgBox.alert(this, "Thanh toán không thành công!");
            }
        }
    }

    private void editRental() {
        Integer maHd = Integer.parseInt(tblRentalList.getValueAt(this.iDangThue, 0).toString());
        HoaDon hd = hddao.selectByID(maHd);

        LoaiGia lg = lgdao.selectByID(hd.getMaLg());
        cboPriceType.setSelectedItem(lg);
        System.out.println("edit:" + cboPriceType.getSelectedItem());

        KhachHang kh = khdao.selectByID(hd.getMaKh());
        this.setFormKhachHang(kh);

        roomList.clear();
        List<Object> list = hdpdao.selectSoPhongByHoaDon(maHd);
        for (Object i : list) {
            Phong p = pdao.selectByID(i.toString());
            roomList.add(p);
        }
        this.fillTblRoomSelected();

        serviceList.clear();
        List<HDDichVu> dvs = hddvdao.selectByMaHd(maHd);
        for (HDDichVu i : dvs) {
            serviceList.add(i);
        }
        this.fillTblService();

//        System.out.println(lg.toString());
        this.updateStatus();
    }

    private void updateRetal() {
        try {
            Integer maHd = Integer.parseInt(tblRentalList.getValueAt(this.iDangThue, 0).toString());
            HoaDon hd = hddao.selectByID(maHd);
            hdpdao.deleteByHd(maHd);
            hddvdao.deleteByHd(maHd);

            this.createRoomInvoice(hd.getMaLg(), hd.getMaKh(), hd.getMaNv());
            this.createServiceInvoice(hd.getMaLg(), hd.getMaKh(), hd.getMaNv());
            MsgBox.alert(this, "Cập nhật phiếu thành công!");
            this.clearForm();
        } catch (Exception e) {
            MsgBox.alert(this, "Cập nhật phiếu không thành công!");
        }
    }

    private void fillServicePrice() {
        DichVu dv = (DichVu) cboService.getSelectedItem();
        try {
            Integer soLuong = Integer.parseInt(txtQuantity.getText().toString());
            if (soLuong < 200) {
                double gia = dv.getGia() * soLuong;
                lblServicePrice.setText(FormatData.formatMoney(gia));
            }
        } catch (Exception e) {
            lblServicePrice.setText(FormatData.formatMoney(dv.getGia()));
        }
    }

    private void fillTotalService() {
        try {
            double tong = 0;
            for (HDDichVu hddv : serviceList) {
                DichVu dv = dvdao.selectByID(hddv.getMaDv());
                tong += dv.getGia() * hddv.getSoLuong();
            }
            lblTotalService.setText(FormatData.formatMoney(tong));
        } catch (Exception e) {
            lblTotalService.setText("$$");
        }
    }

//    private void fillGiaPhong() {
//        try {
//            String soPhong = tblDanhSach.getValueAt(this.iChonPhong1, 0).toString();
//            Phong p = pdao.selectByID(soPhong);
//            LoaiGia lg = (LoaiGia) cboLoaiGia.getSelectedItem();
//            LoaiPhongLoaiGia lplg = lplgdao.selectByLpAndLg(p.getMaLP(), lg.getMa());
//            lblGiaPhong.setText(FormatData.formatMoney(lplg.getDonGia()));
//        } catch (Exception e) {
//        }
//    }
    private void exportBillToPDF(Integer maHD) throws IOException {
        //times
        int gioThue = -1;
        int gioTre_QuaDem = -1;
        int tongNgayThue = -1;
        int maLG = 0;

        //list 
        List<Integer> listSoLuong = null;
        List<String> listTenLG = null;
        List<String> listTenDV = null;
        List<String> listSoPhong = null;
        List<Double> listDGDV = null;
        List<Double> listDGPhong = null;
        List<Double> listTienPhong = new ArrayList<>();
        List<Double> listTongTien = null;
        List<Double> listTongTienHD = null;
        List<String> listTenLP = null;

        //DAO use
        maLG = pdfdao.selectMaLG(maHD);
        gioThue = pdfdao.selectHour(maHD);
        gioTre_QuaDem = pdfdao.selecHour2(maHD);
        tongNgayThue = pdfdao.selecHour3(maHD);
        listSoPhong = pdfdao.selectPhong(maHD);
        listTenLG = pdfdao.selectTenLG(maHD);
        listTenLP = pdfdao.selectTenLP(maHD);
        listSoLuong = pdfdao.selectSoLuong(maHD);
        listTenDV = pdfdao.selectTenDV(maHD);
        listDGPhong = pdfdao.selectDonGiaPhong(maHD);
        listDGDV = pdfdao.selectDGDV(maHD);
        listTongTien = pdfdao.selectTongTienDV(maHD);
        listTongTienHD = pdfdao.selectTongTienHD(maHD);

        //Object
        HoaDon hd = hddao.selectByID(maHD);
        KhachHang khachHang = khdao.selectByID(hd.getMaKh());

        //moneyCustomer
        switch (maLG) {
            case 1:
                if (gioThue <= 2) {
                    for (int i = 0; i < listDGPhong.size(); i++) {
                        listTienPhong.add(i, listDGPhong.get(i));
                    }
                } else {
                    for (int i = 0; i < listDGPhong.size(); i++) {
                        listTienPhong.add(i, listDGPhong.get(i) + (gioThue - 2) * 20000);
                    }
                }
                break;
            case 2:
                if (gioTre_QuaDem >= 10 && tongNgayThue > 0) {
                    for (int i = 0; i < listDGPhong.size(); i++) {
                        listTienPhong.add(i, listDGPhong.get(i) + (gioTre_QuaDem - 10) * 20000);
                    }
                } else {
                    for (int i = 0; i < listDGPhong.size(); i++) {
                        listTienPhong.add(i, listDGPhong.get(i));
                    }
                }
                break;
            default:
                if (tongNgayThue < 2) {
                    for (int i = 0; i < listDGPhong.size(); i++) {
                        listTienPhong.add(i, listDGPhong.get(i));
                    }
                } else {
                    for (int i = 0; i < listDGPhong.size(); i++) {
                        listTienPhong.add(i, tongNgayThue * listDGPhong.get(i));
                    }
                }
                break;
        }

        //Document create and setting
        String path = "invoice.pdf";
        PdfWriter pdfWriter = null;
        try {
            pdfWriter = new PdfWriter(path);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DatPhongFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        PdfDocument pdfDocument = new PdfDocument(pdfWriter);
        pdfDocument.setDefaultPageSize(PageSize.A4);
        Document document = new Document(pdfDocument);

        //Table 1
        float col = 520f;
        float columnWidth[] = {col};
        Table headTbl = new Table(columnWidth);

        headTbl.setBackgroundColor(new DeviceRgb(63, 169, 219));

        headTbl.addCell(new Cell().add("STARTUP HOTEL")
                .setTextAlignment(TextAlignment.CENTER)
                .setVerticalAlignment(VerticalAlignment.MIDDLE)
                .setMarginTop(30f)
                .setFontSize(25f)
                .setBorder(Border.NO_BORDER)
        );
        headTbl.addCell(new Cell().add("INVOICE")
                .setTextAlignment(TextAlignment.CENTER)
                .setVerticalAlignment(VerticalAlignment.MIDDLE)
                .setFontSize(20f)
                .setBorder(Border.NO_BORDER)
        );

        headTbl.addCell(new Cell().add("Information Technology\n#3546 Markhyun\n987654321")
                .setTextAlignment(TextAlignment.RIGHT)
                .setMarginTop(5f)
                .setBorder(Border.NO_BORDER)
                .setMarginRight(10f));

        document.add(headTbl);
        document.add(new Paragraph("\n"));

        //TABLE 2
        float colWidth[] = {260, 260};
        Table inforTbl = new Table(colWidth);
        inforTbl.addCell(new Cell(0, 4)
                .add("Customer Information")
                .setBold()
                .setBorder(Border.NO_BORDER)
        );
        inforTbl.addCell(new Cell().add("Receipt No: " + hd.getMa())
                .setBorder(Border.NO_BORDER)
        );
        inforTbl.addCell(new Cell().add("Cashier: " + removeAccent(Auth.user.getTen()))
                .setBorder(Border.NO_BORDER)
        );
        inforTbl.addCell(new Cell().add("Date of rent: " + hd.getNgayThue())
                .setBorder(Border.NO_BORDER)
        );
        inforTbl.addCell(new Cell().add("Date of payment: " + hd.getNgayThanhToan())
                .setBorder(Border.NO_BORDER)
        );

        inforTbl.addCell(new Cell().add("Customer: " + removeAccent(khachHang.getTen()))
                .setBorder(Border.NO_BORDER)
        );

        inforTbl.addCell(new Cell().add("Description: ")
                .setBorder(Border.NO_BORDER)
        );
        document.add(inforTbl);
        document.add(new Paragraph("=========================================================================="));

//TABLE 3
        float tblWidth[] = {10, 160, 160, 190};
        Table allRoomTbl = new Table(tblWidth);
        document.add(new Paragraph("Room is rented: \n"));
        if (!listSoPhong.isEmpty()) {
            allRoomTbl.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
            allRoomTbl.addCell(new Cell().add(removeAccent("Type of rental")).setBorder(Border.NO_BORDER));
            allRoomTbl.addCell(new Cell().add(removeAccent("Type - Number of rooms")).setBorder(Border.NO_BORDER));
            allRoomTbl.addCell(new Cell().add(removeAccent("Into money"))
                    .setBorder(Border.NO_BORDER)
                    .setTextAlignment(TextAlignment.RIGHT));
            switch (maLG) {
                case 1:
                    for (int i = 0; i < listSoPhong.size(); i++) {
                        allRoomTbl.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add("- " + (removeAccent(listTenLG.get(i))) + ": " + gioThue + removeAccent(" giờ")).setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add(removeAccent(listTenLP.get(i)) + " - " + listSoPhong.get(i)).setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add(FormatData.formatMoney(listTienPhong.get(i)) + " VND")
                                .setBorder(Border.NO_BORDER)
                                .setTextAlignment(TextAlignment.RIGHT));
                    }
                    break;
                case 2:
                    for (int i = 0; i < listSoPhong.size(); i++) {
                        allRoomTbl.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add("- " + (removeAccent(listTenLG.get(i))) + ": " + gioTre_QuaDem + removeAccent(" giờ")).setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add(removeAccent(listTenLP.get(i)) + " - " + listSoPhong.get(i)).setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add(FormatData.formatMoney(listTienPhong.get(i)) + " VND")
                                .setBorder(Border.NO_BORDER)
                                .setTextAlignment(TextAlignment.RIGHT));
                    }
                    break;
                default:
                    for (int i = 0; i < listSoPhong.size(); i++) {
                        allRoomTbl.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add("- " + (removeAccent(listTenLG.get(i))) + ": " + tongNgayThue + removeAccent(" ngày")).setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add(removeAccent(listTenLP.get(i)) + " - " + listSoPhong.get(i)).setBorder(Border.NO_BORDER));
                        allRoomTbl.addCell(new Cell().add(FormatData.formatMoney(listTienPhong.get(i)) + " VND")
                                .setBorder(Border.NO_BORDER)
                                .setTextAlignment(TextAlignment.RIGHT));
                    }
                    break;
            }

        }
        document.add(allRoomTbl);

        Table allServicesTbl = new Table(tblWidth);
        if (!listTenDV.isEmpty()) {
            document.add(new Paragraph("Service used: \n"));
            allServicesTbl.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
            allServicesTbl.addCell(new Cell().add(removeAccent("Service name")).setBorder(Border.NO_BORDER));
            allServicesTbl.addCell(new Cell().add(removeAccent("Quantity x unit price")).setBorder(Border.NO_BORDER));
            allServicesTbl.addCell(new Cell().add(removeAccent(""))
                    .setBorder(Border.NO_BORDER)
                    .setTextAlignment(TextAlignment.RIGHT));

            for (int i = 0; i < listTenDV.size(); i++) {
                allServicesTbl.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
                allServicesTbl.addCell(new Cell().add("- " + removeAccent(listTenDV.get(i)))
                        .setBorder(Border.NO_BORDER));
                allServicesTbl.addCell(new Cell().add(listSoLuong.get(i) + " x " + FormatData.formatMoney(listDGDV.get(i)) + " VND").setBorder(Border.NO_BORDER));
                allServicesTbl.addCell(new Cell().add(FormatData.formatMoney(listTongTien.get(i)) + " VND")
                        .setBorder(Border.NO_BORDER)
                        .setTextAlignment(TextAlignment.RIGHT));
            }
        }
        document.add(allServicesTbl);

        document.add(new Paragraph("_______________################################################_______________"));
        float tblWidthTM[] = {130, 10, 130, 250};
        Table totalMoney = new Table(tblWidthTM);
        if (!listTongTienHD.isEmpty()) {
            totalMoney.addCell(new Cell().add("Total money: ").setBorder(Border.NO_BORDER));
            totalMoney.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
            totalMoney.addCell(new Cell().add("").setBorder(Border.NO_BORDER));
            totalMoney.addCell(new Cell().add(FormatData.formatMoney(listTongTienHD.get(0)) + " VND")
                    .setBorder(Border.NO_BORDER)
                    .setBold()
                    .setTextAlignment(TextAlignment.RIGHT));
        }
        document.add(totalMoney);

        document.close();
        System.out.println("PDF Created!");

        ///Open after created
        File file = new File("invoice.pdf");
        if (file.toString().endsWith(".pdf")) {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + file);
        } else {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(file);
        }

    }

    private String removeAccent(String s) {
        String temp = Normalizer.normalize(s, Normalizer.Form.NFD);
        Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
        return pattern.matcher(temp).replaceAll("");
    }
}
